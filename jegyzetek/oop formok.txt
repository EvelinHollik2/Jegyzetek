eljárás orientált:
- 50-es években jelent meg

oop:
- elzártság: elérhetősége az adatoknak -- public, private, protect
- öröklődés: példányosítás segítségével
- polimorfizmus : az örökölt dolgokat tudjuk felül írni

get: kérik az értékét és vissza adja
set: kapja az értéket, publikus változó
this: az osztályon belül valamilyen tulajdonságra vonatkozik

void: nem ad vissza értéket

generate constructor -- konstruktor generálása
konstruktor -- osztály legfontosabb része. példányosít.

exception -- kivétel kezelése -- nem várt hiba

fájl olvasása: "file.ReadLine();" -- soronként olvas

- List: dinamikus lista -- tetszés szerinnt bővíthető, törölhető, rendezhető. objektumot tárol
- Array: rögzített, adott mennyiségű.
- Dictionary: kettő között van, a leggyorsabb elérhetőséget biztosít.

metódus túlterhelés -- overloading

LINQ -- SQL-hez hasonló utasítások segítségével lehetett az adatot lekérdezni ha rendezett listáról van szó
lambda kifejezés (ebben megadjuk a porrásokat) => {utasítások}

példányosítás (paraméterek megadása): Emlosok emlosok = new Emlosok();

származtatás: Macska : Emlosok

- : base -- tovább küldi az adatokat az alapnak

uint 4millióig jó szám...

algoritmusok: a számítógép csak algoritmizáló feladatot tud megoldani 

Interface:
csak viselkedést lehet örököltetni.

GUI -- grafikus user interface: (WinForm.netFrameWork)
- WPF -- .netFramework / .netcore : Egy alapot ad, kézzel kell beállítani mindent.
- WinForm -- .netFramework / .netcore : Windows beállításait veszi át
	.netcore: operációs rendszer független, hordozható alkalmazásra használják
	.netFramework: a windows magja


Numerikus adattípusok:
integer - egész
double, float - lebegőpontos
decimal - binárisan kódolt decimális

https://www.connectionstrings.com/mysql/
Adatbázis kapcsolása: - Megkeressük a szolgáltató kiegészítőjét. 
- manage nuget packages.. -- MySql.Data - install --> references- mysql.data --> using MySql.Data.MySqlClient;
- Form - betoltes(); --> generálás -->

	listBox_tagok.Items.Clear();
            try
            {
                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }
                command.CommandText = "SELECT `azon`,`nev`,`szulev`,`irszam`,`orsz` FROM `ugyfel` WHERE 1 ORDER BY nev;";
                using (MySqlDataReader dr = command.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        Tag beolvasottTag = new Tag(dr.GetInt32("azon"), dr.GetString("nev"), dr.GetInt32("szulev"), dr.GetInt32("irszam"), dr.GetString("orsz"));
                        listBox_tagok.Items.Add(beolvasottTag);
                    }
                }
            } 
            catch (MySqlException ex) 
            {
                MessageBox.Show(ex.Message); //hibakód
                Environment.Exit(0);
            }
	

program (fájlként tárolt)
process (végrehajtás alatii program) - párhuzamosan futó szálakra fel lehet osztani
thread (process része -- egymással adatokon keresztül nem komunikál, minden elem külön szálon mozog)

showDialog: modál
